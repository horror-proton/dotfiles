(defvar eww "/usr/bin/env eww -c $HOME/.config/eww")

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []

  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end" :spacing 20
    (box
      :orientation "h"
      :space-evenly false
      :spacing 10
      (net :name "wlan0" :up {EWW_NET.wlan0.NET_UP} :down {EWW_NET.wlan0.NET_DOWN})
      (net :name "eno1" :up {EWW_NET.eno1.NET_UP} :down {EWW_NET.eno1.NET_DOWN})
    )
    (metric :label "󰖀 "
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (circ :label " "
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (box 
      :class "cpu"
      :orientation "h"
      :space-evenly false
      (label :class "cpu" :text "")
      (for c in {EWW_CPU.cores}
        (scale
          :min 0
          :max 101
          :active false
          :orientation "v"
          :flipped true
          :value {c.usage}
          )))
    time))

(deflisten workspaces :initial '[{"id":1,"windows":0}]' "scripts/watch-workspaces")
(deflisten current_workspace :initial "1" "scripts/watch-active-workspace")
(defwidget workspaces []
  (eventbox
    :onscroll "echo {} | sed -e 's/up/-1/g' -e 's/down/+1/g' | xargs hyprctl dispatch workspace > /dev/null 2>&1"
    :class "workspaces"
    (box :space-evenly false
      (for workspace in workspaces
        (button :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.windows > 0  ? '●' : '○'}")
          )
        )
      )
    )
  )
)

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "🎵${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget circ [label value]
  (box
    :orientation "h"
    :class "circ"
    :space-evenly false
    (label :text label)
    (circular-progress
      :value value
      :thickness 3
      :start-at 75
      :width 15
      :height 15
    )
  )
)

(defwidget net [name up down]
  (box
    :orientation "h"
    :class "net-label"
    :space-evenly false
    (label :text name)
    (box
      :orientation "v"
      :class "net-values"
      :space-evenly false
      (label
        :xalign 1
        :text {up/1000000>=1 ? round(up/1000000,1)+'M' : down/1000>=1 ? round(up/1000,1)+'K' : up}
      )
      (label
        :xalign 1
        :text {down/1000000>=1 ? round(down/1000000,1)+'M' : down/1000>=1 ? round(down/1000,1)+'K' : down}
      )
    )
  )
)

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s" :initial "0"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "5px"
                      :width "96%"
                      :height "25px"
                      :anchor "top center")
  :exclusive true
  (bar))
