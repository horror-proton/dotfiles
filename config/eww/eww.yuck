(defvar eww "/usr/bin/env eww -c $HOME/.config/eww")

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "ó°–€ "
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (circ :label "î‰¦ "
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (label :class "cpu" :text "ï’¼ ")
    (box 
      :class "cpu"
      :orientation "h"
      :space-evenly false
      (for c in {EWW_CPU.cores}
        (scale
          :min 0
          :max 101
          :active false
          :orientation "v"
          :flipped true
          :value {c.usage}
          )))
    (box
      :class "net"
      :orientation "h"
      :space-evenly false
        (net :name "wlan0" :up {EWW_NET.wlan0.NET_UP} :down {EWW_NET.wlan0.NET_DOWN})
    )
    time))

(deflisten workspaces :initial "[]" "scripts/watch-workspaces")
(deflisten current_workspace :initial "1" "scripts/watch-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "scripts/change-active-workspace {} ${current_workspace}" :class "workspaces"
    (box :space-evenly false
      (for workspace in workspaces
        (button :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
          )
        )
      )
    )
  )
)

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget circ [label value]
  (box
    :orientation "h"
    :class "circ"
    :space-evenly false
    (label :text label)
    (circular-progress
      :value value
      :thickness 3
      :width 15
      :height 15
    )
  )
)

(defwidget net [name up down]
  (box
    :orientation "h"
    :class "net"
    :space-evenly false
    (label :text name)
    (box
      :orientation "v"
      :class "net"
      :space-evenly false
      (label :text up)
      (label :text down)
    )
  )
)

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "5px"
                      :width "96%"
                      :height "25px"
                      :anchor "top center")
  :exclusive true
  (bar))
